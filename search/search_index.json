{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Asyncio GraphQL Client","text":"<p>A simple asynchronous Python GraphQL client based on asyncio and aiohttp.</p> <p>Get started</p>"},{"location":"#features","title":"Features","text":"<ul> <li>It's just a lightweight wrapper around aiohttp client sessions</li> <li>Support for queries and mutations compatible with the GraphQL over HTTP spec</li> <li>Support for file uploads following the GraphQL multipart form requests spec</li> <li>Support for subscriptions following the graphql-ws protocol spec</li> <li>Fully type annotated code base</li> <li>Full test coverage</li> </ul>"},{"location":"advanced-usage/","title":"Advanced usage","text":""},{"location":"advanced-usage/#passing-request-options-to-aiohttp","title":"Passing request options to <code>aiohttp</code>","text":"<p>While you can set various default options on your <code>aiohttp.ClientSession</code> instance, there's sometimes the need to pass extra options to the underlying request made by <code>aiohttp</code>.</p> <p>For this purpose, any additional keyword argument passed to <code>GraphQLClient.execute</code> will be passed to <code>aiohttp.ClientSession.request</code>.</p> <pre><code>import aiohttp\nfrom aiogqlc import GraphQLClient\n\nasync def foo():\n    async with aiohttp.ClientSession() as session:\n        client = GraphQLClient(\"https://example.com/graphql/\", session=session)\n\n        response = await client.execute(\n            document=\"query { someField }\",\n            headers={\"Authorization\": \"Bearer SomeToken\"},\n            timeout=aiohttp.ClientTimeout(total=10),\n        )\n</code></pre>"},{"location":"authentication/","title":"Authentication","text":""},{"location":"authentication/#authenticate-queries-and-mutations","title":"Authenticate queries and mutations","text":"<p>HTTP based requests can be authenticated using HTTP headers. Take a look at the aiohttp documentation to learn more.</p> <p>The following example shows how to set a default <code>Authorization</code> header for the whole session.</p> <pre><code>import aiohttp\nfrom aiogqlc import GraphQLClient\n\nheaders = {\n    \"Authorization\": \"Token &lt;your-token-here&gt;\"\n}\n\nasync def foo():\n    async with aiohttp.ClientSession(headers=headers) as session:\n        client = GraphQLClient(\"https://example.com/graphql/\", session=session)\n</code></pre> <p>Instead of setting a default header for the whole session, you can also set a header for a single request.</p> <pre><code>import aiohttp\nfrom aiogqlc import GraphQLClient\n\nheaders = {\n    \"Authorization\": \"Token &lt;your-token-here&gt;\"\n}\n\nasync def foo():\n    async with aiohttp.ClientSession() as session:\n        client = GraphQLClient(\"https://example.com/graphql/\", session=session)\n        response = await client.execute(\"query { someField }\", headers=headers)\n</code></pre>"},{"location":"authentication/#authenticate-graphql-ws-connections","title":"Authenticate <code>graphql-ws</code> connections","text":"<p>GraphQL servers usualy don't support the authentication of WebSocket connections via HTTP headers. The reason for this is that the WebSocket specification does not cover the usage of HTTP headers via WebSockets.</p> <p>Instead of HTTP headers, so called connection parameters are used to authenticate a <code>graphql-ws</code> WebSocket connections. Keep in mind that connection parameters are a subprotocol specific feature and not an universal standard.</p> <pre><code>import aiohttp\nfrom aiogqlc import GraphQLClient\n\n\nasync def foo():\n    async with aiohttp.ClientSession() as session:\n        client = GraphQLClient(\"https://example.com/graphql/\", session=session)\n\n        connection_params = {\n            \"username\": \"john\",\n            \"password\": \"1234\",\n        }\n\n        async with client.connect(params=connection_params) as connection:\n            pass\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#setup","title":"Setup","text":"<ol> <li>Clone the repository</li> <li>Make sure you have uv installed</li> <li>Install project dependencies with <code>uv sync</code></li> </ol>"},{"location":"contributing/#linting","title":"Linting","text":"<ul> <li>Run <code>make format</code> to format the code.</li> <li>Run <code>make lint</code> to lint the code.</li> </ul> <p>If you don't have make installed, take a look at the <code>Makefile</code> and run it's commands manually.</p>"},{"location":"contributing/#pre-commit","title":"pre-commit","text":"<p>If you want to run the linter automatically on every commit, you can install the pre-commit hooks by running:</p> <pre><code>uv run pre-commit install\n</code></pre>"},{"location":"contributing/#testing","title":"Testing","text":"<p>Run <code>make test</code> to run all tests in your local environment.</p>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>Preview the documentation website locally by running <code>uv run mkdocs serve</code>.</p>"},{"location":"file-uploads/","title":"File uploads","text":"<p>File uploads are not part of the official GraphQL spec (yet). To fill the gap AIOGQLC supports the widely adopted GraphQL multipart request specification.</p> <p>File upload variables work just like other variables. Just remember to open files in a readable <code>mode</code>. Otherwise they can't be read and uploaded.</p>"},{"location":"file-uploads/#upload-a-single-file","title":"Upload a single file","text":"<pre><code>import aiohttp\nfrom aiogqlc import GraphQLClient\n\ndocument = \"\"\"\n    mutation($file: Upload!) {\n        uploadFile(file: $file) {\n            size\n        }\n    }\n\"\"\"\n\nvariables = {\n    \"file\": open(\"test.txt\", \"rb\")\n}\n\n\nasync def foo():\n    async with aiohttp.ClientSession() as session:\n        client = GraphQLClient(\"https://example.com/graphql/\", session=session)\n        response = await client.execute(document, variables=variables)\n        print(await response.json())\n</code></pre>"},{"location":"file-uploads/#uploading-a-list-of-files","title":"Uploading a list of files","text":"<pre><code>import aiohttp\nfrom aiogqlc import GraphQLClient\n\ndocument = \"\"\"\n    mutation($files: [Upload!]!) {\n        uploadFiles(files: $files) {\n            id\n        }\n    }\n\"\"\"\n\nvariables = {\n    \"files\": [\n        open(\"foo.zip\", \"rb\"),\n        open(\"bar.zip\", \"rb\"),\n    ],\n}\n\n\nasync def foo():\n    async with aiohttp.ClientSession() as session:\n        client = GraphQLClient(\"https://example.com/graphql/\", session=session)\n        response = await client.execute(document, variables=variables)\n        print(await response.json())\n</code></pre>"},{"location":"file-uploads/#prevent-unnecessary-uploads","title":"Prevent unnecessary uploads","text":"<p>A file can be referenced multiple times but will only be uploaded once.</p> <pre><code>import aiohttp\nfrom aiogqlc import GraphQLClient\n\ndocument = \"\"\"\n    mutation($files: [Upload!]!) {\n        combineFiles(files: $files) {\n            id\n        }\n    }\n\"\"\"\n\nblank_file = open(\"blank.pdf\", \"rb\")\ncontent_file = open(\"content.pdf\", \"rb\")\n\nvariables = {\n    \"files\": [\n        blank_file,\n        content_file,\n        blank_file,\n    ],\n}\n\n\nasync def foo():\n    async with aiohttp.ClientSession() as session:\n        client = GraphQLClient(\"https://example.com/graphql/\", session=session)\n        response = await client.execute(document, variables=variables)\n        print(await response.json())\n</code></pre>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>Run the following pip command in a terminal:</p> <pre><code>pip install aiogqlc\n</code></pre>"},{"location":"getting-started/#try-it-out","title":"Try it out","text":"<p>The following code should run without modifications, try it out!</p> <pre><code>import asyncio\nimport aiohttp\nfrom aiogqlc import GraphQLClient\n\ndocument = \"\"\"\n    query {\n        allFilms {\n            films {\n                title\n            }\n        }\n    }\n\"\"\"\n\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        endpoint = \"https://swapi-graphql.netlify.app/.netlify/functions/index\"\n        client = GraphQLClient(endpoint, session=session)\n        response = await client.execute(document)\n        print(await response.json())\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"getting-started/#learn-more","title":"Learn more","text":"<p>Take a look at the navigation to learn more about queries, mutations, subscriptions and other operations.</p>"},{"location":"migrating/","title":"Migrating","text":""},{"location":"migrating/#from-4xx-to-5xx","title":"From 4.x.x to 5.x.x","text":"<p>The connection initialization parameters of the legacy <code>graphql-ws</code> protocol now default to an empty JSON object <code>{}</code> instead of <code>null</code>. This is to be more aligned with the reference implementation.</p> <p>Furthermore, various constants have been removed from <code>aiogqlc.constants</code>. They were not considered part of the public API, but in case you used them, you might need to update your code.</p>"},{"location":"migrating/#from-3xx-to-4xx","title":"From 3.x.x to 4.x.x","text":"<p>Support for Python 3.7 was dropped because it reached its end of life. Migrate by making sure you use a newer Python version.</p>"},{"location":"migrating/#from-2xx-to-3xx","title":"From 2.x.x to 3.x.x","text":"<p>Support for Python 3.6 was dropped because it reached its end of life. Migrate by making sure you use a newer Python version.</p>"},{"location":"migrating/#from-1xx-to-2xx","title":"From 1.x.x to 2.x.x","text":"<p>The <code>GraphQLClient</code> constructor and how the client is used changed. <code>GraphQLClient</code> does not longer create its own aiohttp client session. Instead, it takes a pre-configured sessions as an argument.</p> 1.x.x2.x.x <pre><code>from aiogqlc import GraphQLClient\n\nendpoint = \"https://example.com/graphql/\"\nheaders = {}\ncookies = {}\n\nasync with GraphQLClient(endpoint, headers=headers, cookies=cookies) as client:\n    response = await client.execute(document)\n</code></pre> <pre><code>from aiogqlc import GraphQLClient\nfrom aiohttp import ClientSession\n\nendpoint = \"https://example.com/graphql/\"\nheaders = {}\ncookies = {}\n\nasync with ClientSession(headers=headers, cookies=cookies) as session:\n    client = GraphQLClient(endpoint, session=session)\n    response = await client.execute(document)\n</code></pre>"},{"location":"mutations/","title":"Mutations","text":"<p>Mutations work just like queries. If you want to upload files via mutations, take a look at the file uploads documentation.</p>"},{"location":"mutations/#executing-a-simple-mutation","title":"Executing a simple mutation","text":"<pre><code>import aiohttp\nfrom aiogqlc import GraphQLClient\n\ndocument = \"\"\"\n    mutation ($userId: ID!) {\n        deleteUser (id: $userId) {\n            id\n        }\n    }\n\"\"\"\n\nvariables = {\n    \"userId\": \"42\",\n}\n\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        client = GraphQLClient(\"https://example.com/graphql/\", session=session)\n        response = await client.execute(document, variables=variables)\n        print(await response.json())\n</code></pre>"},{"location":"mutations/#selecting-an-operation","title":"Selecting an operation","text":"<pre><code>import aiohttp\nfrom aiogqlc import GraphQLClient\n\ndocument = \"\"\"\n    mutation Operation1 {\n        doSomething\n    }\n    mutation Operation2 {\n        doSomethingElse\n    }\n\"\"\"\n\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        client = GraphQLClient(\"https://example.com/graphql/\", session=session)\n        response = await client.execute(document, operation=\"Operation2\")\n        print(await response.json())\n</code></pre>"},{"location":"queries/","title":"Queries","text":"<p>All examples on this page are runnable. Be encouraged to copy and run them.</p>"},{"location":"queries/#executing-simple-queries","title":"Executing simple queries","text":"<pre><code>import asyncio\nimport aiohttp\nfrom aiogqlc import GraphQLClient\n\nENDPOINT = \"https://swapi-graphql.netlify.app/.netlify/functions/index\"\n\ndocument = \"\"\"\n    query {\n        allFilms {\n            films {\n                title\n            }\n        }\n    }\n\"\"\"\n\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        client = GraphQLClient(document, session=session)\n        response = await client.execute(document)\n        print(await response.json())\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"queries/#passing-variables","title":"Passing variables","text":"<pre><code>import aiohttp\nfrom aiogqlc import GraphQLClient\n\nENDPOINT = \"https://swapi-graphql.netlify.app/.netlify/functions/index\"\n\ndocument = \"\"\"\n    query ($count: Int!) {\n        allFilms (first: $count) {\n            films {\n                title\n            }\n        }\n    }\n\"\"\"\n\nvariables = {\n    \"count\": 3,\n}\n\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        client = GraphQLClient(ENDPOINT, session=session)\n        response = await client.execute(document, variables=variables)\n        print(await response.json())\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"queries/#selecting-an-operation","title":"Selecting an operation","text":"<pre><code>import aiohttp\nfrom aiogqlc import GraphQLClient\n\nENDPOINT = \"https://swapi-graphql.netlify.app/.netlify/functions/index\"\n\ndocument = \"\"\"\n    query Operation1 {\n        allPlanets {\n            totalCount\n        }\n    }\n\n    query Operation2 {\n        allFilms {\n            totalCount\n        }\n    }\n\"\"\"\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        client = GraphQLClient(ENDPOINT, session=session)\n        response = await client.execute(document, operation=\"Operation2\")\n        print(await response.json())\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"subscriptions/","title":"Subscriptions","text":"<p>WebSocket based subscriptions are not part of the official GraphQL specification (yet). Fortunately, there are third-party specifications such as graphql-ws and graphql-transport-ws.</p> <p>AIOGQLC currently only supports the legacy <code>graphql-ws</code> subprotocol.</p> <p>Subprotocol names are confusing!</p> <p>Note that the legacy <code>graphql-ws</code> subprotocol is hosted in a repository called <code>graphql-ws-transport</code>, while the newer <code>graphql-transport-ws</code> subprotocol is hosted in a repository called <code>graphql-ws</code>. This documentation always refers to the subprotocol names, not the repository names.</p>"},{"location":"subscriptions/#using-the-graphql-ws-subprotocol","title":"Using the <code>graphql-ws</code> subprotocol","text":""},{"location":"subscriptions/#starting-a-subscription","title":"Starting a subscription","text":"<pre><code>import aiohttp\nfrom aiogqlc import GraphQLClient\n\ndocument = \"\"\"\n    subscription ($postId: ID!) {\n        likeAdded(postId: $postId)\n    }\n\"\"\"\n\nvariables = {\n    \"postId\": \"42\"\n}\n\n\nasync def foo():\n    async with aiohttp.ClientSession() as session:\n        client = GraphQLClient(\"https://example.com/graphql/\", session=session)\n\n        async with client.connect() as connection:\n            async for payload in connection.subscribe(document, variables=variables):\n                print(payload)\n</code></pre>"},{"location":"subscriptions/#start-multiple-subscriptions-using-a-single-connection","title":"Start multiple subscriptions using a single connection","text":"<p>The <code>graphql-ws</code> protocol allows us to reuse a single WebSocket connection for multiple subscriptions.</p> <pre><code>import aiohttp\nfrom aiogqlc import GraphQLClient\n\ndocument = \"\"\"\n    subscription ($postId: ID!) {\n        likeAdded(postId: $postId)\n    }\n\"\"\"\n\n\nasync def watch_likes(connection, post_id):\n    variables = {\n        \"postId\": post_id\n    }\n\n    async for payload in connection.subscribe(document, variables=variables):\n        print(payload)\n\n\nasync def foo():\n    async with aiohttp.ClientSession() as session:\n        client = GraphQLClient(\"https://example.com/graphql/\", session=session)\n\n        async with client.connect() as connection:\n            asyncio.create_task(watch_likes(connection, post_id=\"1\"))\n            asyncio.create_task(watch_likes(connection, post_id=\"2\"))\n</code></pre>"},{"location":"subscriptions/#selecting-an-operation","title":"Selecting an operation","text":"<pre><code>import aiohttp\nfrom aiogqlc import GraphQLClient\n\ndocument = \"\"\"\n    subscription Subscription1 {\n        count(to: 11)\n    }\n    subscription Subscription2 {\n        count(to: 22)\n    }\n\"\"\"\n\n\nasync def foo():\n    async with aiohttp.ClientSession() as session:\n        client = GraphQLClient(\"https://example.com/graphql/\", session=session)\n\n        async with client.connect() as connection:\n            async for payload in connection.subscribe(document, operation=\"Subscription2\"):\n                print(payload)\n</code></pre>"},{"location":"subscriptions/#using-connection-params","title":"Using connection params","text":"<p>Some servers allow clients to specify connection params. These are particular useful for authentication and other connection settings.</p> <pre><code>import aiohttp\nfrom aiogqlc import GraphQLClient\n\ndocument = \"\"\"\n    subscription {\n        newTemperature\n    }\n\"\"\"\n\n\nasync def foo():\n    async with aiohttp.ClientSession() as session:\n        client = GraphQLClient(\"https://example.com/graphql/\", session=session)\n\n        connection_params = {\n            \"username\": \"john\",\n            \"password\": \"1234\",\n            \"keep_alive_interval\": 20,\n        }\n\n        async with client.connect(params=connection_params) as connection:\n            async for payload in connection.subscribe(document):\n                print(payload)\n</code></pre>"},{"location":"testing/","title":"Testing","text":"<p>There is no need to mock <code>aiogqlc</code> in your tests. Instead you might want to mock your GraphQL backend. This can be done by providing a <code>aiohttp.web.Application</code>.</p> <p>The following example shows a <code>pytest</code> and <code>pytest-aiohttp</code> based test using a mock GraphQL backend:</p> <pre><code>import aiohttp\nimport aiohttp.web\nfrom aiogqlc import GraphQLClient\n\n\nclass TestGraphQLView(aiohttp.web.View):\n    async def post(self):\n        return aiohttp.web.json_response({\"data\": {\"ping\": \"pong\"}})\n\n\nasync def test_ping_query(aiohttp_client):\n    app = aiohttp.web.Application()\n    app.router.add_route(\"*\", \"/graphql\", TestGraphQLView)\n\n    graphql_session = await aiohttp_client(app)\n    client = GraphQLClient(endpoint=\"/graphql\", session=graphql_session)\n\n    response = await client.execute(\"query { ping }\")\n    assert await response.json() == {\"data\": {\"ping\": \"pong\"}}\n</code></pre> <p>In fact, the <code>aiogqlc</code> test suite itself is based on this approach. Take a look at the aiogqlc tests directory for more advanced examples.</p>"}]}